{"version":3,"sources":["components/loader.js","components/message.js","App.js","serviceWorker.js","index.js"],"names":["Loader","props","react_default","a","createElement","className","class","Message","params","match","_useState","useState","message","toString","replace","transformURLToText","_useState2","Object","slicedToArray","inputMessage","setValue","_useState3","color","_useState4","inputColor","setColor","_useState5","_useState6","showColorWheel","setColorWheel","transformTextToURL","style","width","backgroundColor","display","flexDirection","alignItems","justifyContent","type","value","onChange","e","target","history","push","fontSize","bottom","position","cursor","onClick","lib","onChangeComplete","hex","App","hasLoaded","setLoaded","useEffect","setTimeout","concat","react_router_dom","react_router","render","_ref","location","exact","path","to","name","component","Boolean","window","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32f54889.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Loader(props){\n    return(\n        <p className={props.class}>loading</p>\n    )\n}","import React, { useState } from \"react\";\nimport { CirclePicker } from \"react-color\";\n\nexport default function Message(props) {\n    //const {color, message} = match.params\n  const {\n    match: { params }\n  } = props;\n\n  const [inputMessage, setValue] = useState(transformURLToText(params.message));\n  const [inputColor, setColor] = useState(\n    transformNumberToHex(params.color.toString())\n  );\n  const [showColorWheel, setColorWheel] = useState(false);\n\n  function doShowColorWheel() {\n    setColorWheel(true);\n  }\n  function doHideColorWheel() {\n    setColorWheel(false);\n  }\n\n  function transformURLToText(message) {\n    if (params.message) {\n      return message\n        .toString()\n        .replace(/\\+/g, \" \")\n        .replace(/-/g, \"\\n\");\n    } else {\n      var defaultMessage = \"Escribe tu mensaje\";\n      return defaultMessage;\n    }\n  }\n  function transformTextToURL(message) {\n    return message\n      .toString()\n      .replace(/ /g, \"+\")\n      .replace(/\\n/g, \"-\");\n  }\n\n  function transformHexToNumber(hex) {\n    return hex.toString().replace(/#/g, \"\");\n  }\n\n  function transformNumberToHex(color) {\n    var newColor = \"#\" + color;\n    return newColor;\n  }\n\n  function updateInputMessage(e) {\n    setValue(e.target.value);\n    props.history.push(transformTextToURL(e.target.value));\n  }\n\n  function updateInputColor(color) {\n    setColor(color.hex);\n    props.history.replace(\n      \"/\" +\n        transformHexToNumber(color.hex) +\n        \"/\" +\n        transformTextToURL(inputMessage)\n    );\n  }\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        backgroundColor: inputColor,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }}\n    >\n      <textarea\n        type=\"text\"\n        value={inputMessage}\n        onChange={updateInputMessage}\n      />\n      {showColorWheel ? (\n          <div> <span style={{fontSize:\"20px\", bottom:\"20px\", position:\"relative\", cursor: \"pointer\"}}onClick={() => doHideColorWheel()}>âœ—</span>\n        <CirclePicker color={inputColor} onChangeComplete={updateInputColor} /></div>\n      ) : (\n        <p onClick={() => doShowColorWheel()} style={{cursor:\"pointer\"}}>change background color</p>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport Loader from \"./components/loader\";\nimport Message from \"./components/message\";\n\nimport \"./App.scss\";\n\nfunction App(props) {\n  const [hasLoaded, setLoaded] = useState(false);\n  useEffect(() => {\n    setTimeout(() => {\n      setLoaded(true);\n    }, 500);\n  });\n\n  return (\n    <div className=\"App\">\n      <Loader class={`loader-fade-out ${hasLoaded && \"invisible\"}`} />\n      <div className={`app-fade-in ${hasLoaded && \"visible\"}`}>\n        <Router>\n          <Route\n            render={({ location }) => {\n              return (\n                <Switch location={location}>\n                  <Route\n                    exact\n                    path=\"/\"\n                    render={() => <Redirect to=\"/3f51b5/Escribe+tu+mensaje\" />}\n                  />\n                  <Route\n                    exact\n                    path=\"/message\"\n                    render={() => <Redirect to=\"/3f51b5/Escribe+tu+mensaje\" />}\n                  />\n                  <Route\n                    name=\"home\"\n                    path=\"/:color/:message\"\n                    component={Message}\n                  />\n                  <Route name=\"home\" path=\"/:color?\" component={Message} />\n                </Switch>\n              );\n            }}\n          />\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}